@import 'utils';

$breakpoints: (
  xsmall: 300px,
  small: 450px,
  medium: 920px,
  large: 1280px
);

$custom-bp: 450px;

$dark: rgb(41, 35, 77);
$bg: fade-out(dark, .9);

// $options : (
//   // label: [breakpoint] [number of items in a row]
//   default: 0 1, // REQUIRED - Leave first value.
//   xsmall: 300px 2,
//   small: $custom-bp 3,
//   medium: map-get($breakpoints, medium) 7,
//   large: 1280px 10
// );

// # of items in a row on different breakpoints
$options : (
  default-bp: 0,
  devault-items: 1,
  xsmall-bp: 300px,
  xsmall-items: 2,
  small-bp: 500px,
  small-items: 3
);

$gap: 2em;

*, *::before, *::after { box-sizing: border-box }

html, body { font: 16px/1.5 sans-serif }

// TwoFace
.tf { &-wrapper {
    display: flex;
    flex-wrap: wrap;

    padding: $gap/2;

    width: 100%;

    background: $bg;

    transition: opacity 300ms ease;
  }

  &-item {
    display: flex;
    flex-direction: column;
    // flex: 1 0 calc(100% / #{map-get($itemCounts, default)});

    position: relative;

    height: 100%;
    // max-width: calc(100% / #{map-get($itemCounts, default)});

    background: $bg;

    transition: box-shadow 250ms;

    // @include generateChildsStyles(map-get($itemCounts, default));

    // @each $key, $value in $map {
    //   @each $val in $value {
    //     $i: index($value, $val);
    //     @if $i == 1 {
    //       @insert screen($val)
    //     } @else {
    //       color: $val;
    //     }
    //   }
    // }

    // @each $bp, $count in $itemCounts {
    //   @if $bp == 'default' {
    //     flex: 1 0 calc(100% / #{$count});
    //     max-width: calc(100% / #{$count});
    //     @include generateChildsStyles($count)
    //   } @else {
    //     @include screen(map-get($breakpoints, $bp)) {
    //       flex: 1 0 calc(100% / #{$count});
    //       max-width: calc(100% / #{$count});
    //       @include generateChildsStyles($count)
    //     }
    //   }
    // }

    @each $key, $values in $options {
      @if $key == 'default' { // Generate default styles w/o breakpoint
        @each $val in $values {
          $i: index($values, $val);
          @if $i == 2 { // Generate styles from val 2
            flex: 1 0 calc(100% / #{getValueByIndex($i, 2, $val)});
            max-width: calc(100% / #{getValueByIndex($i, 2, $val)});
            @include generateChildsStyles(getValueByIndex($i, 2, $val))
          }
        }
      } @else {
        @each $val in $values {
          $i: index($values, $val);
          @if $i == 1 { // Generate breakpoint from first value in map
            @include screen(getValueByIndex($i, 1, $val)) {
              @each $val in $values {
                $i: index($values, $val);
                @if $i == 2 { // Generate styles in breakpoint from second value in map
                  flex: 1 0 calc(100% / #{getValueByIndex($i, 2, $val)});
                  max-width: calc(100% / #{getValueByIndex($i, 2, $val)});
                  @include generateChildsStyles(getValueByIndex($i, 2, $val))
                }
              }
            }
          }
        }
      }

      // @each $val in $values {
      //   $i: index($values, $val);
      //   @if $i == 1 {
      //     @if getValueByIndex($i, 1, $val) == 0 { // check if
      //         @each $val in $values {
      //           $i: index($values, $val);
      //           @if $i == 2 {
      //             flex: 1 0 calc(100% / #{getValueByIndex($i, 2, $val)});
      //             max-width: calc(100% / #{getValueByIndex($i, 2, $val)});
      //             @include generateChildsStyles(getValueByIndex($i, 2, $val))
      //           }
      //         }
      //     } @else {
      //       @include screen(getValueByIndex($i, 1, $val)) {
      //         @each $val in $values {
      //           $i: index($values, $val);
      //           @if $i == 2 {
      //             flex: 1 0 calc(100% / #{getValueByIndex($i, 2, $val)});
      //             max-width: calc(100% / #{getValueByIndex($i, 2, $val)});
      //             @include generateChildsStyles(getValueByIndex($i, 2, $val))
      //           }
      //         }
      //       }
      //     }
      //   }
      // }
    }

    &_top {
      padding: 0;
      margin: $gap/2;

      text-align: left;

      background: $bg;
      border: none;
      outline: 0;
      opacity: 1;
      transition: opacity 300ms ease;

      appearance: none;
      cursor: pointer;

      img {
        display: block;
        width: 100%;
        height: auto;
      }
    }

    &_bottom {
      display: none;
      align-self: flex-start;

      position: relative;

      padding: $gap/2;

      // width: calc(100% * #{map-get($itemCounts, default)});
      max-height: 0;

      background: $bg;

      transition: all 300ms;
      transition: max-height 1s ease;

      // @each $bp, $count in $itemCounts {
      //   @include screen(map-get($breakpoints, $bp)) {
      //     width: calc(100% * #{$count});
      //   }
      // }

      @each $key, $values in $options {
        @if $key == 'default' { // Check if default
          @each $val in $values {
            $i: index($values, $val);
            @if $i == 2 { // Generate styles from val 2
              width: calc(100% * #{getValueByIndex($i, 2, $val)});
            }
          }
        } @else {
          @each $val in $values {
            $i: index($values, $val);
            @if $i == 1 { // Generate breakpoint from val 1
              @include screen(getValueByIndex($i, 1, $val)) {
                @each $val in $values {
                  $i: index($values, $val);
                  @if $i == 2 { // Generate styles from val 2
                    width: calc(100% * #{getValueByIndex($i, 2, $val)});
                  }
                }
              }
            }
          }
        }
      }

      &--open {
        display: block;

        max-height: 999em;
      }

      &-inner {
        padding: $gap;

        width: 100%;
        height: auto;

        background: white;
      }
    }
  }
}